class AIForgeWebApp {
    constructor() {
        this.configManager = new ConfigManager();
        this.streamingClient = new StreamingClient();
        this.uiAdapter = new WebUIAdapter();
        this.currentTaskType = null;
        this.isExecuting = false;
        this.executionCompleted = false;

        this.initializeEventListeners();
        this.loadSettings();
    }

    async initializeApp() {
        // Ê£ÄÊü•ÈÖçÁΩÆÁä∂ÊÄÅ  
        const configStatus = await this.configManager.checkConfigStatus();
        if (!configStatus.configured) {
            this.configManager.showConfigModal();
        }
    }

    initializeEventListeners() {
        // ‰ªªÂä°Á±ªÂûãÊåâÈíÆ  
        document.querySelectorAll('.task-type-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.selectTaskType(e.target.dataset.type);
            });
        });

        // Á§∫‰æãÊåá‰ª§  
        document.querySelectorAll('.example-instruction').forEach(item => {
            item.addEventListener('click', (e) => {
                document.getElementById('instructionInput').value = e.target.dataset.instruction;
            });
        });

        // ÊâßË°åÊåâÈíÆ  
        document.getElementById('executeBtn').addEventListener('click', () => {
            this.executeInstruction();
        });

        // ÂÅúÊ≠¢ÊåâÈíÆ  
        document.getElementById('stopBtn').addEventListener('click', () => {
            this.stopExecution();
        });

        // ËÆæÁΩÆÁõ∏ÂÖ≥  
        document.getElementById('settingsBtn').addEventListener('click', () => {
            this.showSettings();
        });

        document.getElementById('saveSettings').addEventListener('click', () => {
            this.saveSettings();
        });

        document.getElementById('cancelSettings').addEventListener('click', () => {
            this.hideSettings();
        });

        // ÁªìÊûúÊìç‰Ωú  
        document.getElementById('copyResultBtn').addEventListener('click', () => {
            this.copyResult();
        });

        document.getElementById('downloadResultBtn').addEventListener('click', () => {
            this.downloadResult();
        });
    }

    selectTaskType(taskType) {
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅÔºà‰ªÖÁî®‰∫éUIÂ±ïÁ§∫ÂíåÁ§∫‰æãÊåá‰ª§Ôºâ  
        document.querySelectorAll('.task-type-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-type="${taskType}"]`).classList.add('active');

        // Ê≥®ÊÑèÔºöËøô‰∏™ÂÄº‰ªÖÁî®‰∫éÂâçÁ´ØUIÂ±ïÁ§∫Ôºå‰∏çÂΩ±ÂìçÂêéÁ´ØÂ§ÑÁêÜ  
        this.currentTaskType = taskType;

        // Êõ¥Êñ∞Á§∫‰æãÊåá‰ª§    
        this.updateExampleInstructions(taskType);
    }

    updateExampleInstructions(taskType) {
        const examples = {
            'data_fetch': [
                'Ëé∑ÂèñÊúÄÊñ∞ÁöÑËÇ°Á•®‰ª∑Ê†º‰ø°ÊÅØ',
                'ÊêúÁ¥¢ÂÖ≥‰∫éÊ∞îÂÄôÂèòÂåñÁöÑÊúÄÊñ∞Á†îÁ©∂',
                'Êü•ËØ¢‰ªäÂ§©ÁöÑÂ§©Ê∞îÈ¢ÑÊä•'
            ],
            'data_analysis': [
                'ÂàÜÊûêÈîÄÂîÆÊï∞ÊçÆÁöÑË∂ãÂäø',
                'ÂØπÁî®Êà∑ÂèçÈ¶àËøõË°åÊÉÖÊÑüÂàÜÊûê',
                'ËÆ°ÁÆóÊï∞ÊçÆÈõÜÁöÑÁªüËÆ°ÊåáÊ†á'
            ],
            'content_generation': [
                'ÂÜô‰∏ÄÁØáÂÖ≥‰∫éAIÂèëÂ±ïÁöÑÊñáÁ´†',
                'ÁîüÊàê‰∫ßÂìÅ‰ªãÁªçÊñáÊ°à',
                'ÂàõÂª∫‰ºöËÆÆÁ∫™Ë¶ÅÊ®°Êùø'
            ],
            'code_generation': [
                'ÁºñÂÜô‰∏Ä‰∏™ÊéíÂ∫èÁÆóÊ≥ï',
                'ÂàõÂª∫Êï∞ÊçÆÂ∫ìÊü•ËØ¢ËØ≠Âè•',
                'ÁîüÊàêAPIÊé•Âè£‰ª£Á†Å'
            ],
            'search': [
                'ÊêúÁ¥¢PythonÁºñÁ®ãÊïôÁ®ã',
                'Êü•ÊâæÊú∫Âô®Â≠¶‰π†Áõ∏ÂÖ≥ËÆ∫Êñá',
                'ÊêúÁ¥¢ÊúÄ‰Ω≥ÂÆûË∑µÊ°à‰æã'
            ],
            'direct_response': [
                'Ëß£Èáä‰ªÄ‰πàÊòØÊ∑±Â∫¶Â≠¶‰π†',
                'ÊØîËæÉ‰∏çÂêåÁºñÁ®ãËØ≠Ë®ÄÁöÑÁâπÁÇπ',
                '‰ªãÁªçÈ°πÁõÆÁÆ°ÁêÜÊñπÊ≥ï'
            ]
        };

        const exampleContainer = document.querySelector('.example-instruction').parentElement;
        const taskExamples = examples[taskType] || examples['direct_response'];

        exampleContainer.innerHTML = taskExamples.map(example =>
            `<div class="example-instruction cursor-pointer hover:text-blue-600" data-instruction="${example}">üí° ${example}</div>`
        ).join('');

        // ÈáçÊñ∞ÁªëÂÆö‰∫ã‰ª∂  
        exampleContainer.querySelectorAll('.example-instruction').forEach(item => {
            item.addEventListener('click', (e) => {
                document.getElementById('instructionInput').value = e.target.dataset.instruction;
            });
        });
    }

    loadUserSettings() {
        // ‰ªé localStorage ÊàñÁî®Êà∑ÈÖçÁΩÆ‰∏≠Âä†ËΩΩËÆæÁΩÆ  
        const settings = localStorage.getItem('aiforge-user-settings');
        if (settings) {
            try {
                return JSON.parse(settings);
            } catch (e) {
                console.warn('Failed to parse user settings:', e);
            }
        }
        return {
            progressLevel: 'detailed', // ÈªòËÆ§ÂÄº  
            language: 'zh',
            maxRounds: 5
        };
    }

    saveUserSettings(settings) {
        localStorage.setItem('aiforge-user-settings', JSON.stringify(settings));
    }

    getProgressLevel() {
        // ‰ªéÁî®Êà∑ËÆæÁΩÆ‰∏≠Ëé∑ÂèñËøõÂ∫¶Á∫ßÂà´ÂÅèÂ•Ω  
        const settings = this.loadUserSettings();
        return settings.progressLevel || 'detailed'; // ÈªòËÆ§ËØ¶ÁªÜÊ®°Âºè  
    }

    async executeInstruction() {
        const instruction = document.getElementById('instructionInput').value.trim();
        if (!instruction) {
            alert('ËØ∑ËæìÂÖ•Êåá‰ª§');
            return;
        }
        this.executionCompleted = false;
        this.setExecutionState(true);
        this.clearResults();

        const progressContainer = document.getElementById('progressContainer');
        const resultContainer = document.getElementById('resultContainer');

        // Ëé∑ÂèñÁî®Êà∑ËÆæÁΩÆÁöÑËøõÂ∫¶Á∫ßÂà´  
        const progressLevel = this.getProgressLevel();

        // Ê†πÊçÆËøõÂ∫¶Á∫ßÂà´ÂÜ≥ÂÆöÊòØÂê¶ÊòæÁ§∫ËøûÊé•Áä∂ÊÄÅ  
        if (progressLevel !== 'none') {
            this.addProgressMessage('üîó Ê≠£Âú®ËøûÊé•ÊúçÂä°Âô®...', 'info');
        }

        try {
            await this.streamingClient.executeInstruction(instruction, {
                taskType: this.currentTaskType,
                sessionId: Date.now().toString(),
                progressLevel: progressLevel  // ‰º†ÈÄíËøõÂ∫¶Á∫ßÂà´Âà∞ÂêéÁ´Ø  
            }, {
                onProgress: (message, type) => {
                    // Ê†πÊçÆËøõÂ∫¶Á∫ßÂà´ÂÜ≥ÂÆöÊòØÂê¶ÊòæÁ§∫ËøõÂ∫¶Ê∂àÊÅØ  
                    if (progressLevel === 'detailed') {
                        this.addProgressMessage(message, type);
                    } else if (progressLevel === 'minimal' &&
                        ['task_start', 'task_complete', 'error'].includes(type)) {
                        this.addProgressMessage(message, type);
                    }
                    // progressLevel === 'none' Êó∂‰∏çÊòæÁ§∫‰ªª‰ΩïËøõÂ∫¶Ê∂àÊÅØ  
                },
                onResult: (data) => {
                    this.displayResult(data, resultContainer);
                    this.enableResultActions();
                },
                onError: (error) => {
                    this.addProgressMessage(`‚ùå ÈîôËØØ: ${error.message}`, 'error');
                },
                onComplete: () => {
                    if (progressLevel !== 'none') {
                        if (!this.executionCompleted) {
                            this.addProgressMessage('‚úÖ ÊâßË°åÂÆåÊàê', 'complete');
                            this.executionCompleted = true;
                        }
                    }
                    this.setExecutionState(false);
                },
                onHeartbeat: () => {
                    this.triggerBreathingEffect();
                }
            });
        } catch (error) {
            this.addProgressMessage(`üí• ËøûÊé•Â§±Ë¥•: ${error.message}`, 'error');
            this.setExecutionState(false);
        }
    }

    triggerBreathingEffect() {
        if (!this.isExecuting) return; // Âè™Âú®ÊâßË°åÊó∂ÊòæÁ§∫ÊïàÊûú  

        const executeBtn = document.getElementById('executeBtn');
        const progressContainer = document.getElementById('progressContainer');

        // Ê∑ªÂä†ÂëºÂê∏ÊïàÊûú  
        executeBtn.classList.add('breathing');
        progressContainer.classList.add('breathing');

        // 1ÁßíÂêéÁßªÈô§ÊïàÊûú  
        setTimeout(() => {
            executeBtn.classList.remove('breathing');
            progressContainer.classList.remove('breathing');
        }, 1000);
    }

    stopExecution() {
        this.streamingClient.disconnect();
        this.addProgressMessage('‚èπÔ∏è Ê≠£Âú®ÂÅúÊ≠¢ÊâßË°å...', 'info');
        this.setExecutionState(false);
    }

    setExecutionState(isExecuting) {
        this.isExecuting = isExecuting;
        const executeBtn = document.getElementById('executeBtn');
        const stopBtn = document.getElementById('stopBtn');
        const executeText = document.getElementById('executeText');

        if (isExecuting) {
            executeBtn.disabled = true;
            stopBtn.disabled = false;
            executeText.textContent = '‚è≥ ÊâßË°å‰∏≠...';
        } else {
            executeBtn.disabled = false;
            stopBtn.disabled = true;
            executeText.textContent = 'üöÄ ÊâßË°åÊåá‰ª§';
        }
    }

    addProgressMessage(message, type = 'info') {
        const progressContainer = document.getElementById('progressContainer');
        if (!progressContainer) {
            console.error('Progress container not found');
            return;
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `progress-item ${type}`;
        messageDiv.innerHTML = `  
            <span class="timestamp">[${new Date().toLocaleTimeString()}]</span>  
            <span class="message">${message}</span>  
        `;

        progressContainer.appendChild(messageDiv);
        progressContainer.scrollTop = progressContainer.scrollHeight;

        // Á°Æ‰øùÂÆπÂô®ÂèØËßÅ  
        progressContainer.style.display = 'block';
    }

    clearResults() {
        document.getElementById('progressContainer').innerHTML = '';
        document.getElementById('resultContainer').innerHTML = '<div class="text-gray-500 text-center py-8">ÊâßË°åÁªìÊûúÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫...</div>';
        this.disableResultActions();
    }

    displayResult(data, container) {

        if (!container) {
            console.error('Result container not found');
            return;
        }

        try {
            // È™åËØÅÊï∞ÊçÆÁªìÊûÑ  
            if (!data || typeof data !== 'object') {
                throw new Error('Invalid result data structure');
            }

            // Â§ÑÁêÜÂµåÂ•óÁöÑÁªìÊûúÊï∞ÊçÆ    
            let resultData = data;
            if (data.result && typeof data.result === 'object') {
                resultData = data.result;
            }

            // Á°ÆÂÆöUIÁ±ªÂûã - ‰º†ÈÄíÂâçÁ´Ø‰ªªÂä°Á±ªÂûã‰ªÖ‰ΩúÂèÇËÄÉ  
            const uiType = this.determineUIType(resultData, this.currentTaskType);

            // Ê∏≤ÊüìÁªìÊûú  
            this.uiAdapter.render(resultData, uiType, container);
            this.currentResult = data;

            // ÂêØÁî®ÁªìÊûúÊìç‰ΩúÊåâÈíÆ  
            this.enableResultActions();

        } catch (error) {
            console.error('Failed to display result:', error);
            container.innerHTML = `  
                <div class="error-message">  
                    <h3>ÁªìÊûúÊòæÁ§∫ÈîôËØØ</h3>  
                    <p>${error.message}</p>  
                    <details>  
                        <summary>ÂéüÂßãÊï∞ÊçÆ</summary>  
                        <pre>${JSON.stringify(data, null, 2)}</pre>  
                    </details>  
                </div>  
            `;
        }
    }

    determineUIType(data, frontendTaskType) {
        // data ÊòØ execution_resultÔºåÂøÖÈ°ªÊúâ result Â≠óÊÆµ  
        if (!data.result) {
            console.error('Invalid data structure: missing result field', data);
            return 'web_card'; // ÈªòËÆ§ÂõûÈÄÄ  
        }

        const resultData = data.result;

        console.log('UIÁ±ªÂûãÂà§Êñ≠:', {
            hasDisplayItems: !!(resultData.display_items && resultData.display_items.length > 0),
            firstItemType: resultData.display_items?.[0]?.type,
            backendTaskType: resultData.task_type,
            frontendTaskType: frontendTaskType
        });

        // ‰ºòÂÖà‰ΩøÁî®ÂêéÁ´ØÂ∑≤ÁªèÂ§ÑÁêÜÂ•ΩÁöÑ UI Á±ªÂûã  
        if (resultData.display_items && resultData.display_items.length > 0) {
            return resultData.display_items[0].type || 'web_card';
        }

        // ÂõûÈÄÄÈÄªËæë‰ΩøÁî®ÂêéÁ´ØÁöÑ‰ªªÂä°Á±ªÂûã  
        const actualTaskType = resultData.task_type || frontendTaskType;
        if (actualTaskType === 'content_generation' || actualTaskType === 'code_generation') {
            return 'web_editor';
        }
        return 'web_card';
    }

    enableResultActions() {
        document.getElementById('copyResultBtn').disabled = false;
        document.getElementById('downloadResultBtn').disabled = false;
    }

    disableResultActions() {
        document.getElementById('copyResultBtn').disabled = true;
        document.getElementById('downloadResultBtn').disabled = true;
    }

    copyResult() {
        if (this.currentResult) {
            const result = this.currentResult.result || this.currentResult;
            const editorItem = result.display_items?.find(item => item.type === 'web_editor');

            if (editorItem && editorItem.content && editorItem.content.text) {
                const markdownContent = editorItem.content.text;
                navigator.clipboard.writeText(markdownContent).then(() => {
                    this.showToast('Markdown ÂÜÖÂÆπÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
                });
            } else {
                // ÁÆÄÂåñÁöÑÂõûÈÄÄÈÄªËæë  
                const text = JSON.stringify(this.currentResult, null, 2);
                navigator.clipboard.writeText(text).then(() => {
                    this.showToast('ÁªìÊûúÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
                });
            }
        }
    }

    downloadResult() {
        if (this.currentResult) {
            const result = this.currentResult.result || this.currentResult;
            const editorItem = result.display_items?.find(item => item.type === 'web_editor');

            if (editorItem && editorItem.content && editorItem.content.text) {
                const markdownContent = editorItem.content.text;
                const blob = new Blob([markdownContent], { type: 'text/markdown' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'generated-content.md';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
                this.showToast('Markdown Êñá‰ª∂Â∑≤‰∏ãËΩΩ');
            }
        }
    }

    showSettings() {
        const settings = this.loadUserSettings();

        // Êõ¥Êñ∞ËÆæÁΩÆÊ®°ÊÄÅÊ°ÜÂÜÖÂÆπÔºåÂåÖÂê´ËøõÂ∫¶Á∫ßÂà´ÈÄâÊã©  
        document.getElementById('progressLevelSelect').value = settings.progressLevel || 'detailed';
        document.getElementById('maxRounds').value = settings.maxRounds || 5;
        document.getElementById('languageSelect').value = settings.language || 'zh';

        document.getElementById('settingsModal').classList.remove('hidden');
    }

    hideSettings() {
        document.getElementById('settingsModal').classList.add('hidden');
    }

    saveSettings() {
        const progressLevel = document.getElementById('progressLevelSelect').value;
        const maxRounds = document.getElementById('maxRounds').value;
        const language = document.getElementById('languageSelect').value;

        const settings = {
            progressLevel: progressLevel,
            maxRounds: parseInt(maxRounds),
            language: language
        };

        this.saveUserSettings(settings);
        this.hideSettings();
        this.showToast('ËÆæÁΩÆÂ∑≤‰øùÂ≠ò');
    }

    loadSettings() {
        const settings = localStorage.getItem('aiforge-settings');
        if (settings) {
            const parsed = JSON.parse(settings);
            document.getElementById('maxRounds').value = parsed.maxRounds || 5;
            document.getElementById('languageSelect').value = parsed.language || 'zh';
        }
    }
    showToast(message) {
        // ÁÆÄÂçïÁöÑÊèêÁ§∫Ê∂àÊÅØÂÆûÁé∞  
        const toast = document.createElement('div');
        toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50';
        toast.textContent = message;
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 3000);
    }
}

// ÂàùÂßãÂåñÂ∫îÁî®  
document.addEventListener('DOMContentLoaded', () => {
    new AIForgeWebApp();
});